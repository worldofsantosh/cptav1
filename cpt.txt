/*
 * Worker.java
 * Name of the class: SWEN.601.01 - Software Construction
 * Name: Atharva Vaidya
 * Email: aav6986@g.rit.edu
 * --------------------------------------------- Final Exam ---------------------------------------------
 */

public class Worker implements Runnable {
    private String name;
    private int[] jobs;

    public Worker(String name, int[] jobs) {
        this.name = name;
        this.jobs = jobs;
    }

    @Override
    public void run() {
        try {
            for (int job : jobs) {
                System.out.println(name + " is starting job " + job);
                Thread.sleep((int) (Math.random() * 3000) + 1000); // Random delay between 1-3 seconds
                System.out.println(name + " finished job " + job);
            }
        } catch (InterruptedException e) {
            System.out.println(name + " was interrupted!");
        }
    }

    public static void main(String[] args) {
        Thread worker1 = new Thread(new Worker("Worker 1", new int[]{1, 2, 3}));
        Thread worker2 = new Thread(new Worker("Worker 2", new int[]{4, 5}));
        Thread worker3 = new Thread(new Worker("Worker 3", new int[]{6, 7, 8}));

        worker1.start();
        worker2.start();
        worker3.start();

        try {
            worker1.join();
            worker2.join();
            worker3.join();
        } catch (InterruptedException e) {
            System.out.println("Main thread interrupted!");
        }

        System.out.println("All workers have finished their jobs.");
    }
}


/*
 * BankAccount.java
 * Name of the class: SWEN.601.01 - Software Construction
 * Name: Atharva Vaidya
 * Email: aav6986@g.rit.edu
 * --------------------------------------------- Final Exam ---------------------------------------------
 */

public class BankAccount {
    private double balance;

    public BankAccount(double initialBalance) {
        this.balance = initialBalance;
    }

    public synchronized void deposit(double amount) {
        balance += amount;
        System.out.println("Deposited: $" + amount + " | Current Balance: $" + balance);
        notifyAll();
    }

    public synchronized void withdraw(double amount) throws InterruptedException {
        while (balance < amount) {
            System.out.println("Insufficient funds. Waiting for deposit...");
            wait();
        }
        balance -= amount;
        System.out.println("Withdrew: $" + amount + " | Current Balance: $" + balance);
    }

    public double getBalance() {
        return balance;
    }
}

/*
 * BankAccount.java
 * Name of the class: SWEN.601.01 - Software Construction
 * Name: Atharva Vaidya
 * Email: aav6986@g.rit.edu
 * --------------------------------------------- Final Exam ---------------------------------------------
 */

public class BankAccount {
    private double balance;

    public BankAccount(double initialBalance) {
        this.balance = initialBalance;
    }

    public synchronized void deposit(double amount) {
        balance += amount;
        System.out.println("Deposited: $" + amount + " | Current Balance: $" + balance);
        notifyAll();
    }

    public synchronized void withdraw(double amount) throws InterruptedException {
        while (balance < amount) {
            System.out.println("Insufficient funds. Waiting for deposit...");
            wait();
        }
        balance -= amount;
        System.out.println("Withdrew: $" + amount + " | Current Balance: $" + balance);
    }

    public double getBalance() {
        return balance;
    }
}

/*
 * Depositor.java
 * Name of the class: SWEN.601.01 - Software Construction
 * Name: Atharva Vaidya
 * Email: aav6986@g.rit.edu
 * --------------------------------------------- Final Exam ---------------------------------------------
 */

public class Depositor extends Thread {
    private BankAccount account;
    private String name;

    public Depositor(String name, BankAccount account) {
        this.name = name;
        this.account = account;
    }

    @Override
    public void run() {
        try {
            for (int i = 0; i < 5; i++) {
                double amount = (int) (Math.random() * 1000) + 500; // Random deposit amount
                Thread.sleep((int) (Math.random() * 6000) + 1000); // Random delay 1-6 seconds
                account.deposit(amount);
            }
        } catch (InterruptedException e) {
            System.out.println(name + " was interrupted!");
        }
    }
}

/*
 * Withdrawer.java
 * Name of the class: SWEN.601.01 - Software Construction
 * Name: Atharva Vaidya
 * Email: aav6986@g.rit.edu
 * --------------------------------------------- Final Exam ---------------------------------------------
 */

public class Withdrawer extends Thread {
    private BankAccount account;
    private String name;

    public Withdrawer(String name, BankAccount account) {
        this.name = name;
        this.account = account;
    }

    @Override
    public void run() {
        try {
            for (int i = 0; i < 3; i++) {
                double amount = 1000; // Fixed withdrawal amount
                account.withdraw(amount);
                Thread.sleep((int) (Math.random() * 4000) + 1000); // Random delay 1-4 seconds
            }
        } catch (InterruptedException e) {
            System.out.println(name + " was interrupted!");
        }
    }
}

/*
 * BankMain.java
 * Name of the class: SWEN.601.01 - Software Construction
 * Name: Atharva Vaidya
 * Email: aav6986@g.rit.edu
 * --------------------------------------------- Final Exam ---------------------------------------------
 */

public class BankMain {
    public static void main(String[] args) {
        BankAccount sharedAccount = new BankAccount(5000);

        Thread[] depositors = new Thread[10];
        Thread[] withdrawers = new Thread[10];

        for (int i = 0; i < 10; i++) {
            depositors[i] = new Depositor("Depositor " + (i + 1), sharedAccount);
            withdrawers[i] = new Withdrawer("Withdrawer " + (i + 1), sharedAccount);
        }

        for (Thread depositor : depositors) {
            depositor.start();
        }

        for (Thread withdrawer : withdrawers) {
            withdrawer.start();
        }

        try {
            for (Thread depositor : depositors) {
                depositor.join();
            }

            for (Thread withdrawer : withdrawers) {
                withdrawer.join();
            }
        } catch (InterruptedException e) {
            System.out.println("Main thread interrupted!");
        }

        System.out.println("All transactions completed.");
    }
}

quiz

Question 2 (1 point)
Number the steps in the development lifecycle so that they are in the correct order:

Pull the latest code from GitHub.
Add some new code.
Compile, run, and test your code.
Fix bugs until your tests pass.
Use git to commit your changes to your local repository.
Push your changes to GitHub.

Question 3 (1 point)
For each type, choose either "primitive" or "reference":

Object: Reference
short: Primitive
int[]: Reference
String: Reference
ArrayList: Reference
byte: Primitive
float: Primitive
Integer: Reference
char: Primitive
boolean: Primitive

q4
Matching Definitions
Shallow Equality: Comparing two values using only identity (i.e., value or address stored in memory).
Memory: Organized as addresses into which the computer can store data and from which the computer can retrieve data.
super: Used by a child class to refer to the state and behavior in its parent and to call a constructor on the parent.
Field: A variable that belongs to an object.
Class: A blueprint or template that defines the state and behavior for a category of things.
Variable Table: Stores identifiers, types, and addresses so that when an identifier is used, the value can be retrieved.
Deep Equality: Comparing the state of two objects, i.e., the value of the variables inside of the objects.
Method: A function that belongs to an object.
Variable

Question 5 (1 point)
Check all of the true statements below:

A char is an integer.
The scope of a variable is from the line on which it is declared to the end of the body in which it is declared.
Conditionals are used to implement a branching flow of control.
When using a switch statement, any statements following the matching case will be executed, including statements in other cases, until a break statement.
The statements in the body of a while loop may be executed 0 or more times.
An array is passed into a function as a reference.
Java supports arrays with any number of dimensions (1, 2, or more).

Question 6 (1 point)
Given that a = false and b = true, check any expression that evaluates to true:

b && !a
b || !a
(a || b) && !(a && b)

Question 7 (1 point)
Match each term with the correct definition:

Overriding: Replacing a method in the parent class with a new implementation in the child.
Polymorphism: Allows an instance of a child class to be used in code where the parent is expected.
Test-Driven Development (TDD): A development process that involves writing tests first, and the code to make the test pass afterwards.
Unit Test: A class that comprises many small tests, each of which usually tests only a single method.
Refactoring: Used to safely modify your code, allowing you to rerun tests and ensure no previous functionality is broken.
Base Case: The part of a recursive function that determines when the work should stop.
Recursive Case: The part of a recursive function that does a unit of work and makes a recursive call.
Stack Overflow: Refers to exceeding the maximum number of stack frames allowed in the call stack.
In-Place Sort: A sort performed within the array itself by swapping values between indexes.
Natural Order: Given any two elements, determines which comes first in sorted order.

Question 8 (1 point)
File: SCR-20241212-hxhf.png
Check all of the true statements below:

If no access modifier is specified, a field or method is only visible to other classes in the same package.
Two objects of the same class can see and/or change each other's private fields.
The "new" keyword tells Java to find some memory and store something there, like a new array or an object.
When used to compare two variables, the == operator will compare the value stored in each variable's location in memory.
The string literal pool means that the behavior of the == operator is sometimes unpredictable when comparing strings.

Question 9 (1 point)
Select the correct complexity (average case unless stated otherwise):

Binary Search: O(log N)
Quicksort (worst case): O(N²)
Array List (access by index): O(1)
Array List (add to the end): O(1)
Linked List (add to the front): O(1)
Merge Sort (worst case): O(N log N)
Set (add a value): O(1)

Question 10 (1 point)
Match each term with the correct definition:

Hash Function: A one-way function that converts arbitrary data into a number.
Collision: Caused when two or more keys are mapped to the same index in a hash map.
Chaining: Uses a list to handle the event that two keys are placed into the same index in a hash map.
Open Addressing: Places the second key in the next empty index in the array when two keys are placed into the same index in a hash map.
Pre-Order Traversal: Visits the node first, then the left subtree, then the right subtree.
In-Order Traversal: Visits the left subtree, then the node, then the right subtree.
Post-Order Traversal: Visits the left subtree, then the right subtree, then the node.
Readers/Writers: Used to read/write character data to/from a data source (e.g., a file).
Input/Output Streams: Used to read/write binary data to/from a data source (e.g., a file).
Flushing: Forces buffered data to be written.

Question 12 (1 point)
File: SCR-20241212-iawx.png
Arrange the TDD steps so that they are in the correct order:

Fail: Write a failing test.
Pass: Write the minimal code to make the test pass.
Refactor.
Commit/Push.

Question 13 (1 point)
Check all of the true statements below:

Two objects that are equal according to their equals(Object) methods should always return the same hash code.
As the number of collisions in a hash map increases, the performance of the put and get operations approaches O(N).
Once determined, an object's hash code must never change.
A binary search tree is one where, given the value V of any node, all values in the left subtree are less than V, and all values in the right subtree are greater.
Question 15 (0.5 points)
Use Breadth First Search (BFS) to find the path from A to I. Assume neighbors are visited in alphabetical order:

A → B → C → D → H → I

Question 14 (1 point)
File: SCR-20241212-ibbi.png
Choose the sequence that would create the min heap with the following configuration:
Answer: 1, 2, 3, 4, 5, 6

Question 15 (0.5 points)
File: SCR-20241212-ibcx.png
Use breadth first search (BFS) to find the path from A to I. Assume that neighbors are visited in alphabetical order:
Answer: ABCDEFGHI

Question 16: Use Depth First Search (DFS)
File: SCR-20241212-ibif.png
Use Depth First Search (DFS) to find the path from A to I. Assume that neighbors are visited in alphabetical order:

ABFGECDHI
ABCDEFGHI
ABFJI
ABGEDHI
Answer: ABFGECDHI


Question 17 (1 point)
Check all of the true statements below:

Breadth First Search (BFS) will always find a path with the fewest possible edges.
Dijkstra's Algorithm will always find the shortest path in terms of weights.
A try must always be followed by at least one catch or exactly one finally.
A thread may be moved to the WAITING state if sleep, join, or wait are used.
A thread in the WAITING state can be interrupted.
At least two threads and two locks must be involved to create deadlock.


